1、计算内核代码段、数据段的段基址、段限长、特权级。

2、计算进程0的代码段、数据段的段基址、段限长、特权级。

3、fork进程1之前，为什么先调用move_to_user_mode()？用的是什么方法？解释其中的道理。

4、根据什么判定move_to_user_mode()中iret之后的代码为进程0的代码。

5、进程0的task_struct在哪？具体内容是什么？给出代码证据。

6、在system.h里
#define _set_gate(gate_addr,type,dpl,addr) \
__asm__ ("movw %%dx,%%ax\n\t" \
    "movw %0,%%dx\n\t" \
    "movl %%eax,%1\n\t" \
    "movl %%edx,%2" \
    : \
    : "i" ((short) (0x8000+(dpl<<13)+(type<<8))), \
    "o" (*((char *) (gate_addr))), \
    "o" (*(4+(char *) (gate_addr))), \
    "d" ((char *) (addr)),"a" (0x00080000))

#define set_intr_gate(n,addr) \
    _set_gate(&idt[n],14,0,addr)

#define set_trap_gate(n,addr) \
    _set_gate(&idt[n],15,0,addr)

#define set_system_gate(n,addr) \
    _set_gate(&idt[n],15,3,addr)
读懂代码。这里中断门、陷阱门、系统调用都是通过_set_gate设置的，用的是同一个嵌入汇编代码，比较明显的差别是dpl一个是3，另外两个是0，这是为什么？说明理由。

7、分析get_free_page()函数的代码，叙述在主内存中获取一个空闲页的技术路线。

8、copy_process函数的参数最后五项是：long eip,long cs,long eflags,long esp,long ss。查看栈结构确实有这五个参数，奇怪的是其他参数的压栈代码都能找得到，确找不到这五个参数的压栈代码，反汇编代码中也查不到，请解释原因。详细论证其他所有参数是如何传入的。

9、详细分析Linux操作系统如何设置保护模式的中断机制。

10、分析Linux操作系统如何剥夺用户进程访问内核及其他进程的能力。

11、_system_call:
    cmpl $nr_system_calls-1,%eax
    ja bad_sys_call

分析后面两行代码的意义。